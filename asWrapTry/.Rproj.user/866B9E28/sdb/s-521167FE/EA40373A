{
    "contents" : "\n#pragma once\n\nnamespace Rcpp {\n    \n    // define template specialisations for as and wrap\n    template<> SEXP wrap(const SamData &s) {\n        List ret = Rcpp::List::create(  Rcpp::Named(\"Chr1\") = s.getChr1(), \n                                        Rcpp::Named(\"Chr2\") = s.getChr2(),\n                                        Rcpp::Named(\"Seq1\") = s.getSeq(),\n                                        Rcpp::Named(\"HS1\")  = s.getHS1(),\n                                        Rcpp::Named(\"HS2\")  = s.getHS2(),\n                                        Rcpp::Named(\"Id\")   = s.getId(),\n                                        Rcpp::Named(\"Start1\") = s.getStart1(),\n                                        Rcpp::Named(\"Start2\") = s.getStart2() );\n        return Rcpp::wrap(ret);\n    }\n\n    template <> SamData as( SEXP s ) {\n        Rcpp::List samL = Rcpp::as<Rcpp::List>(s);\n        SamData sam;\n        \n        sam.setChr1( Rcpp::as<std::string>(samL[\"Chr1\"]) );\n        sam.setChr2( Rcpp::as<std::string>(samL[\"Chr2\"]) );\n        sam.setSeq( Rcpp::as<std::string>(samL[\"Seq1\"]) );\n        sam.setHS1( Rcpp::as<size_t>(samL[\"HS1\"]) );\n        sam.setHS2( Rcpp::as<size_t>(samL[\"HS2\"]) );\n        sam.setStart1( Rcpp::as<long>( samL[\"Start1\"]) );\n        sam.setStart2( Rcpp::as<long>( samL[\"Start2\"]) );\n        sam.setId( Rcpp::as<long>( samL[\"Id\"]) );\n    \n        return sam;\n    }\n}",
    "created" : 1432299748417.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2424203074",
    "id" : "EA40373A",
    "lastKnownWriteTime" : 1432300905,
    "path" : "~/asWrapTry/src/samdataRcppWrapperDef.h",
    "project_path" : "src/samdataRcppWrapperDef.h",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "h"
}